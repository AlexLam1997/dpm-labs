package wallFollower;
import lejos.hardware.motor.EV3LargeRegulatedMotor;

public class PController implements UltrasonicController {
	
	private final int bandCenter, bandwidth;
	private final int motorStraight = 200, FILTER_OUT = 20;
	private EV3LargeRegulatedMotor leftMotor, rightMotor, sensorMotor;
	private int distance;
	private int filterControl;
	
	public PController(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor,
			EV3LargeRegulatedMotor sensorMotor, int bandCenter, int bandwidth) {
		//Default Constructor
		this.bandCenter = bandCenter;
		this.bandwidth = bandwidth;
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		this.sensorMotor = sensorMotor;
		
		// Set all motors to zero speed to allow time for sensors to initialize
		sensorMotor.setSpeed(0);
		sensorMotor.forward();
		
		leftMotor.setSpeed(0);		
		rightMotor.setSpeed(0);
		leftMotor.forward();
		rightMotor.forward();
		filterControl = 0;
	}
	
	@Override
	public void processUSData(int distance) {

		// rudimentary filter - toss out invalid samples corresponding to null
		// signal.
		// (n.b. this was not included in the Bang-bang controller, but easily
		// could have).
		//
		if (distance >= 255 && filterControl < FILTER_OUT) {
			// bad value, do not set the distance var, however do increment the
			// filter value
			filterControl++;
		} else if (distance >= 255) {
			// We have repeated large values, so there must actually be nothing
			// there: leave the distance alone
			this.distance = distance;
		} else {
			// distance went below 255: reset filter and leave
			// distance alone.
			filterControl = 0;
			this.distance = distance;
		}

		// TODO: process a movement based on the us distance passed in (P style)
		
		// If both motors are stopped, start moving the vehicle forward 
		if (!leftMotor.isMoving() && !rightMotor.isMoving()) {
			setSpeedWithError(0);
		}
		
		// calculate our offset from the bandCenter
		int error = this.distance - this.bandCenter - 5; // -5 for distance from sensor to side of vehicle
		
		// switch the rotation direction of the sensor 
		if (!sensorMotor.isMoving()){
			switchSensorDirection(error);
		}
	
		setSpeedWithError(error);
		
	}

	
	@Override
	public int readUSDistance() {
		return this.distance;
	}
	
	/**
	 * A method which switches the direction of the sensor motor
	 */
	public void switchSensorDirection(int error) {
		if(sensorMotor.getLimitAngle() == 110){ // sensor is facing forward
			if ( error < 0 ) { // can't be any error (need large turning radius)
				// If the front of the vehicle is too close to the wall
				// Keep the sensor forward until the vehicle is turned to a safe distance
				sensorMotor.setSpeed(0);
				sensorMotor.rotate(0);
			} else {
				sensorMotor.setSpeed(700);
				sensorMotor.rotate(-110); // move sensor counter-clockwise 110 degrees
			}
		}else{ // sensor is facing sideways
			if ( error < -8 ) {
				// If the side of the vehicle is too close to the wall
				// Keep the sensor to the side until the vehicle is turned to a safe distance
				sensorMotor.setSpeed(0);
				sensorMotor.rotate(0);
			} else {
				sensorMotor.setSpeed(700);
				sensorMotor.rotate(55); // move sensor clockwise 110 degrees
			}
		}
	}
	
	/**
	 * Method to set the proper speed of each wheel
	 */
	public void setSpeedWithError(int error) {
		if ( Math.abs(error) < bandwidth ) {
			steerStraight();
		} else if ( error < 0 ) {
			steerRight(error);
		} else {
			if ( error > 235 ) {
				steerStraight();
			} else {
				steerLeft(error);
			}
		}
	}
	
	/**
	 * Method to steer vehicle straight 
	 */
	public void steerStraight() {
		leftMotor.setSpeed(motorStraight);			
		rightMotor.setSpeed(motorStraight);
		leftMotor.forward();
		rightMotor.forward();
	}
	
	/**
	 * Method to steer vehicle to the right based on the error
	 */
	public void steerRight(int error) {
		leftMotor.setSpeed(motorStraight);			
		rightMotor.setSpeed( 50 / Math.abs(error) );
		leftMotor.forward();
		rightMotor.forward();
	}
	
	/**
	 * Method to steer vehicle to the left based on the error
	 */
	public void steerLeft(int error) {
		leftMotor.setSpeed( 100 / error );			
		rightMotor.setSpeed( motorStraight );
		leftMotor.forward();
		rightMotor.forward();
	}

}
