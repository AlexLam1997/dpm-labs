package wallFollower;
import lejos.hardware.motor.*;

public class BangBangController implements UltrasonicController{
	private final int bandCenter, bandwidth;
	private final int motorLow, motorHigh, FILTER_OUT = 20;
	private int distance;
	private int filterControl;
	private EV3LargeRegulatedMotor leftMotor, rightMotor, sensorMotor;
	
	public BangBangController(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor,
			EV3LargeRegulatedMotor sensorMotor, int bandCenter, int bandwidth, int motorLow, int motorHigh) {
		//Default Constructor
		this.bandCenter = bandCenter;
		this.bandwidth = bandwidth;
		this.motorLow = motorLow;
		this.motorHigh = motorHigh;
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		this.sensorMotor = sensorMotor;
		
		// Set all motors to zero speed to allow time for sensors to initialize
		sensorMotor.setSpeed(0);
		sensorMotor.forward();
		
		leftMotor.setSpeed(0);				
		rightMotor.setSpeed(0);
		leftMotor.forward();
		rightMotor.forward();
		
		filterControl = 0;
	}
	
	@Override
	public void processUSData(int distance) {
		// rudimentary filter - toss out invalid samples corresponding to null
		// signal.
		if (distance >= 255 && filterControl < FILTER_OUT) {
			// bad value, do not set the distance var, however do increment the
			// filter value
			filterControl++;
		} else if (distance >= 255) {
			// We have repeated large values, so there must actually be nothing
			// there: leave the distance alone
			this.distance = distance;
		} else {
			// distance went below 255: reset filter and leave
			// distance alone.
			filterControl = 0;
			this.distance = distance;
		}

		// TODO: process a movement based on the us distance passed in (BANG-BANG style)
		
		// calculate our offset from the bandCenter
		int error = this.distance - this.bandCenter -5; // -5 for distance from sensor to side of vehicle
		
		// If both motors are stopped, start moving the vehicle forward 
		if (!leftMotor.isMoving() && !rightMotor.isMoving()) {
			steerStraight();
		}
		
		// switch the rotation direction of the sensor 
		if (!sensorMotor.isMoving()){
			switchSensorDirection(error);
		}
		
		// Keep moving forward if vehicle is within threshold value
		if ( Math.abs(error) < this.bandwidth ) {
			steerStraight();
		} 
		else if ( error < 0 ) { // We are too close to the wall
			if ( error < -5 ) {
				turnRight(); // Turn our vehicle to the right
			} else {
				steerRight(); // Steer our vehicle to the right
			}
		} else { 
			if ( error > 235 ) {
				// There is a gap in the wall, or it is sensing something very far away
				// Keep going straight
				steerStraight(); 
			} else {
				// We are too far from the wall, steer left
				steerLeft();
			}
		}
		
	}

	@Override
	public int readUSDistance() {
		return this.distance;
	}
	
	/**
	 * A method which switches the direction of the sensor motor
	 */
	public void switchSensorDirection(int error) {
		if(sensorMotor.getLimitAngle() == 110){ // sensor is facing forward
			if ( error < 0 ) {
				// If the front of the vehicle is too close to the wall
				// Keep the sensor forward until the vehicle is turned to a safe distance
				sensorMotor.setSpeed(0);
				sensorMotor.rotate(0);
			} else {
				sensorMotor.setSpeed(700);
				sensorMotor.rotate(-110); // move sensor counter-clockwise 110 degrees
			}
		}else{ // sensor is facing sideways
			if ( error < -5 ) {
				// If the side of the vehicle is too close to the wall
				// Keep the sensor to the side until the vehicle is turned to a safe distance
				sensorMotor.setSpeed(0);
				sensorMotor.rotate(0);
			} else {
				sensorMotor.setSpeed(700);
				sensorMotor.rotate(110); // move sensor clockwise 110 degrees
			}
		}
	}
	
	/**
	 * Method to steer the vehicle in a straight forward direction
	 */
	public void steerStraight() {
		leftMotor.setSpeed(motorHigh);			
		rightMotor.setSpeed(motorHigh);
		leftMotor.forward();
		rightMotor.forward();
	}
	
	/**
	 * Method to turn the vehicle right for sharp turns
	 */
	public void turnRight() {
		leftMotor.setSpeed(motorHigh);			
		rightMotor.setSpeed(0);
		leftMotor.forward();
		rightMotor.forward();
	}
	
	/**
	 * Method to steer the vehicle right
	 */
	public void steerRight() {
		leftMotor.setSpeed(motorHigh);			
		rightMotor.setSpeed(motorLow);
		leftMotor.forward();
		rightMotor.forward();
	}
	
    /**
     * Method to steer the vehicle left
     */
	public void steerLeft() {
		leftMotor.setSpeed(motorLow);			
		rightMotor.setSpeed(motorHigh);
		leftMotor.forward();
		rightMotor.forward();
	}
}
